---

Interpolação

A interpolação é usada para mostrar os valores das variáveis da classe diretamente no HTML. No seu código, por exemplo, {{ item.nome }} exibe o nome de cada produto da lista listaprodutos, e {{ item.preco }} mostra o preço. Quando os valores mudam (por exemplo, após clicar em “+” ou “-”), a tela é atualizada automaticamente pelo Angular.  

---

Property Binding [ ]

O Property Binding liga propriedades HTML/CSS a valores da sua classe. No seu código, o trecho [ngStyle]="{'color': item.preco > 2000 ? 'blue' : 'black'}" altera dinamicamente a cor do preço: azul se o valor for maior que 2000, preto caso contrário. Assim, a interface se adapta automaticamente aos dados do produto.  

---

Class Binding [ngClass]

O Class Binding aplica classes CSS de forma condicional. No código [ngClass]="{'disponivel': item.estoque > 0, 'indisponivel': item.estoque === 0}", o Angular define se o texto aparecerá em verde (Disponível) ou em vermelho/itálico (Indisponível), de acordo com o estoque do produto.  

---

Event Binding ( )

O Event Binding permite responder a ações do usuário, como cliques. No seu código, (click)="toggleMensagem()" chama o método toggleMensagem() quando o botão é pressionado, mostrando ou escondendo a listagem de produtos. Já os botões (click)="aumentarPreco()" e (click)="diminuirPreco()" executam os métodos que alteram os preços, atualizando a interface automaticamente.  

---

Diretivas Estruturais (*ngIf e *ngFor)

O *ngIf="mostrarListagem" decide se a lista de produtos será exibida ou não, dependendo do valor da variável mostrarListagem.  
O *ngFor="let item of listaprodutos" repete o <li> para cada elemento do array listaprodutos, criando automaticamente a listagem na tela.  

---

Spans Dinâmicos

No trecho:  

<span [ngStyle]="{'color': item.preco > 2000 ? 'blue' : 'black'}">
  R$ {{ item.preco }}
</span>

<span [ngClass]="{'disponivel': item.estoque > 0, 'indisponivel': item.estoque === 0}">
  {{ item.estoque > 0 ? 'Disponível' : 'Indisponível' }}
</span>

Temos dois comportamentos importantes:  
- O primeiro span mostra o preço do produto e muda sua cor dinamicamente com ngStyle: azul para preços acima de 2000 e preto para os demais.  
- O segundo span mostra a disponibilidade do produto com ngClass: aplica a classe disponivel (verde e negrito) se houver estoque, e a classe indisponivel (vermelho, itálico e negrito) se não houver. Além disso, o próprio texto exibido muda entre “Disponível” e “Indisponível”.  

---

Diferença nos Métodos de Alterar Preço

Você tem duas versões dos métodos aumentarPreco() e diminuirPreco().  

- Primeira versão (mais simples):

aumentarPreco() {
  this.listaprodutos.forEach(produto => {
    produto.preco = produto.preco * 1.1;
  });
}

Essa forma apenas multiplica o valor, mas pode gerar preços com muitas casas decimais, como 1923.3333333. Isso acontece porque o JavaScript usa ponto flutuante e não controla automaticamente a quantidade de casas.  

- Segunda versão (com arredondamento):

aumentarPreco() {
  this.listaprodutos.forEach(produto => {
    produto.preco = parseFloat((produto.preco * 1.1).toFixed(2));
  });
}

Aqui, além de multiplicar, o código usa .toFixed(2) para arredondar o preço para 2 casas decimais, e depois parseFloat() para garantir que o valor continue sendo um número.  
Assim, em vez de 1923.3333333, o resultado será 1923.33, o que é mais adequado para valores monetários.  